{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\nclass $a5fd07fa01589658$var$Game {\n    constructor(initialState = [\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ]\n    ]){\n        this.board = initialState;\n        this.score = 0;\n        this.status = \"idle\";\n    }\n    moveLeft() {\n        const oldBoard = JSON.parse(JSON.stringify(this.board));\n        for(let i = 0; i < this.board.length; i++){\n            let row = this.board[i];\n            row = this.slideRow(row);\n            row = this.combineRow(row);\n            row = this.slideRow(row);\n            this.board[i] = row;\n        }\n        if (JSON.stringify(oldBoard) !== JSON.stringify(this.board)) this.addNewTile();\n        this.updateStatus();\n    }\n    moveRight() {\n        const oldBoard = JSON.parse(JSON.stringify(this.board));\n        for(let i = 0; i < this.board.length; i++){\n            let row = this.board[i].slice().reverse();\n            row = this.slideRow(row);\n            row = this.combineRow(row);\n            row = this.slideRow(row);\n            this.board[i] = row.reverse();\n        }\n        if (JSON.stringify(oldBoard) !== JSON.stringify(this.board)) this.addNewTile();\n        this.updateStatus();\n    }\n    moveUp() {\n        const oldBoard = JSON.parse(JSON.stringify(this.board));\n        this.transponseBoard();\n        for(let i = 0; i < this.board.length; i++){\n            let row = this.board[i].slice();\n            row = this.slideRow(row);\n            row = this.combineRow(row);\n            row = this.slideRow(row);\n            this.board[i] = row;\n        }\n        this.transponseBoard();\n        if (JSON.stringify(oldBoard) !== JSON.stringify(this.board)) this.addNewTile();\n        this.updateStatus();\n    }\n    moveDown() {\n        const oldBoard = JSON.parse(JSON.stringify(this.board));\n        this.transponseBoard();\n        for(let i = 0; i < this.board.length; i++){\n            let row = this.board[i].slice().reverse();\n            row = this.slideRow(row);\n            row = this.combineRow(row);\n            row = this.slideRow(row);\n            this.board[i] = row.reverse();\n        }\n        this.transponseBoard();\n        if (JSON.stringify(oldBoard) !== JSON.stringify(this.board)) this.addNewTile();\n        this.updateStatus();\n    }\n    canMove() {\n        for(let r = 0; r < 4; r++)for(let c = 0; c < 4; c++){\n            if (this.board[r][c] === 0) return true;\n            if (c < 3 && this.board[r][c] === this.board[r][c + 1]) return true;\n            if (r < 3 && this.board[r][c] === this.board[r + 1][c]) return true;\n        }\n        return false;\n    }\n    getScore() {\n        return this.score;\n    }\n    getState() {\n        return this.board;\n    }\n    getStatus() {\n        return this.status;\n    }\n    createEmptyGrid() {\n        return Array.from({\n            length: 4\n        }, ()=>Array(4).fill(0));\n    }\n    start() {\n        this.status = \"playing\";\n        this.addNewTile();\n        this.addNewTile();\n    }\n    restart() {\n        this.status = \"idle\";\n        this.board = [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ];\n        this.score = 0;\n        this.start();\n    }\n    slideRow(row) {\n        let arr = row.filter((val)=>val);\n        const empty = 4 - arr.length;\n        const zeroes = Array(empty).fill(0);\n        arr = arr.concat(zeroes);\n        return arr;\n    }\n    combineRow(row) {\n        for(let i = 0; i < row.length - 1; i++)if (row[i] === row[i + 1] && row[i] !== 0) {\n            row[i] = row[i] * 2;\n            row[i + 1] = 0;\n            this.score += row[i];\n        }\n        return row;\n    }\n    addNewTile() {\n        const emptyTiles = [];\n        for(let r = 0; r < 4; r++){\n            for(let c = 0; c < 4; c++)if (this.board[r][c] === 0) emptyTiles.push([\n                r,\n                c\n            ]);\n        }\n        if (emptyTiles.length > 0) {\n            const [row, col] = emptyTiles[Math.floor(Math.random() * emptyTiles.length)];\n            this.board[row][col] = Math.random() < 0.9 ? 2 : 4;\n        }\n    }\n    transponseBoard() {\n        const newBoard = [\n            [],\n            [],\n            [],\n            []\n        ];\n        for(let r = 0; r < 4; r++)for(let c = 0; c < 4; c++)newBoard[c][r] = this.board[r][c];\n        this.board = newBoard;\n    }\n    updateStatus() {\n        if (this.board.flat().includes(2048)) this.status = \"win\";\n        else if (!this.board.flat().includes(0) && !this.canMove()) this.status = \"lose\";\n        else this.status = \"playing\";\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\nfunction $09e991522ca7e64e$var$render() {\n    const gameBoard = $09e991522ca7e64e$var$game.getState();\n    const score = $09e991522ca7e64e$var$game.getScore();\n    // eslint-disable-next-line\n    const status = $09e991522ca7e64e$var$game.getStatus();\n    const table = document.querySelector(\"table\");\n    const cells = table.getElementsByTagName(\"td\");\n    let index = 0;\n    for(let row = 0; row < gameBoard.length; row++)for(let col = 0; col < gameBoard[row].length; col++){\n        cells[index].textContent = gameBoard[row][col] === 0 ? \"\" : gameBoard[row][col];\n        cells[index].className = \"field-cell\";\n        if (cells[index].textContent !== \"\") cells[index].classList.add(`field-cell--${cells[index].textContent}`);\n        index++;\n    }\n    const scoreElement = document.querySelector(\".game-score\");\n    scoreElement.textContent = score;\n    const messageWin = document.querySelector(\".message-win\");\n    const messageLose = document.querySelector(\".message-lose\");\n    const messageStart = document.querySelector(\".message-start\");\n    if (status === \"win\") messageWin.classList.remove(\"hidden\");\n    else if (status === \"lose\") messageLose.classList.remove(\"hidden\");\n    else {\n        messageStart.classList.add(\"hidden\");\n        messageLose.classList.add(\"hidden\");\n    }\n}\nconst $09e991522ca7e64e$var$button = document.querySelector(\".button\");\n$09e991522ca7e64e$var$button.addEventListener(\"click\", ()=>{\n    const buttonText = $09e991522ca7e64e$var$button.textContent;\n    if (buttonText === \"Start\") {\n        $09e991522ca7e64e$var$game.start();\n        $09e991522ca7e64e$var$button.textContent = \"Restart\";\n        $09e991522ca7e64e$var$button.classList.replace(\"start\", \"restart\");\n        $09e991522ca7e64e$var$render();\n    } else {\n        $09e991522ca7e64e$var$game.restart();\n        $09e991522ca7e64e$var$render();\n    }\n});\ndocument.addEventListener(\"keydown\", (e)=>{\n    if ($09e991522ca7e64e$var$game.getStatus() !== \"playing\") return;\n    else switch(e.key){\n        case \"ArrowRight\":\n            $09e991522ca7e64e$var$game.moveRight();\n            break;\n        case \"ArrowLeft\":\n            $09e991522ca7e64e$var$game.moveLeft();\n            break;\n        case \"ArrowUp\":\n            $09e991522ca7e64e$var$game.moveUp();\n            break;\n        case \"ArrowDown\":\n            $09e991522ca7e64e$var$game.moveDown();\n            break;\n    }\n    $09e991522ca7e64e$var$render();\n});\n\n\n//# sourceMappingURL=index.4b30db51.js.map\n","'use strict';\n\n// Uncomment the next lines to use your game instance in the browser\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\nfunction render() {\n  const gameBoard = game.getState();\n  const score = game.getScore();\n  // eslint-disable-next-line\n  const status = game.getStatus();\n\n  const table = document.querySelector('table');\n  const cells = table.getElementsByTagName('td');\n\n  let index = 0;\n\n  for (let row = 0; row < gameBoard.length; row++) {\n    for (let col = 0; col < gameBoard[row].length; col++) {\n      cells[index].textContent =\n        gameBoard[row][col] === 0 ? '' : gameBoard[row][col];\n      cells[index].className = 'field-cell';\n\n      if (cells[index].textContent !== '') {\n        cells[index].classList.add(`field-cell--${cells[index].textContent}`);\n      }\n      index++;\n    }\n  }\n\n  const scoreElement = document.querySelector('.game-score');\n\n  scoreElement.textContent = score;\n\n  const messageWin = document.querySelector('.message-win');\n  const messageLose = document.querySelector('.message-lose');\n  const messageStart = document.querySelector('.message-start');\n\n  if (status === 'win') {\n    messageWin.classList.remove('hidden');\n  } else if (status === 'lose') {\n    messageLose.classList.remove('hidden');\n  } else {\n    messageStart.classList.add('hidden');\n    messageLose.classList.add('hidden');\n  }\n}\n\nconst button = document.querySelector('.button');\n\nbutton.addEventListener('click', () => {\n  const buttonText = button.textContent;\n\n  if (buttonText === 'Start') {\n    game.start();\n    button.textContent = 'Restart';\n    button.classList.replace('start', 'restart');\n    render();\n  } else {\n    game.restart();\n    render();\n  }\n});\n\ndocument.addEventListener('keydown', (e) => {\n  if (game.getStatus() !== 'playing') {\n    return;\n  } else {\n    switch (e.key) {\n      case 'ArrowRight':\n        game.moveRight();\n        break;\n      case 'ArrowLeft':\n        game.moveLeft();\n        break;\n      case 'ArrowUp':\n        game.moveUp();\n        break;\n      case 'ArrowDown':\n        game.moveDown();\n        break;\n    }\n  }\n\n  render();\n});\n","'use strict';\n\nclass Game {\n  constructor(\n    initialState = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ],\n  ) {\n    this.board = initialState;\n    this.score = 0;\n    this.status = 'idle';\n  }\n\n  moveLeft() {\n    const oldBoard = JSON.parse(JSON.stringify(this.board));\n\n    for (let i = 0; i < this.board.length; i++) {\n      let row = this.board[i];\n\n      row = this.slideRow(row);\n      row = this.combineRow(row);\n      row = this.slideRow(row);\n      this.board[i] = row;\n    }\n\n    if (JSON.stringify(oldBoard) !== JSON.stringify(this.board)) {\n      this.addNewTile();\n    }\n\n    this.updateStatus();\n  }\n  moveRight() {\n    const oldBoard = JSON.parse(JSON.stringify(this.board));\n\n    for (let i = 0; i < this.board.length; i++) {\n      let row = this.board[i].slice().reverse();\n\n      row = this.slideRow(row);\n      row = this.combineRow(row);\n      row = this.slideRow(row);\n      this.board[i] = row.reverse();\n    }\n\n    if (JSON.stringify(oldBoard) !== JSON.stringify(this.board)) {\n      this.addNewTile();\n    }\n\n    this.updateStatus();\n  }\n  moveUp() {\n    const oldBoard = JSON.parse(JSON.stringify(this.board));\n\n    this.transponseBoard();\n\n    for (let i = 0; i < this.board.length; i++) {\n      let row = this.board[i].slice();\n\n      row = this.slideRow(row);\n      row = this.combineRow(row);\n      row = this.slideRow(row);\n      this.board[i] = row;\n    }\n    this.transponseBoard();\n\n    if (JSON.stringify(oldBoard) !== JSON.stringify(this.board)) {\n      this.addNewTile();\n    }\n\n    this.updateStatus();\n  }\n  moveDown() {\n    const oldBoard = JSON.parse(JSON.stringify(this.board));\n\n    this.transponseBoard();\n\n    for (let i = 0; i < this.board.length; i++) {\n      let row = this.board[i].slice().reverse();\n\n      row = this.slideRow(row);\n      row = this.combineRow(row);\n      row = this.slideRow(row);\n      this.board[i] = row.reverse();\n    }\n    this.transponseBoard();\n\n    if (JSON.stringify(oldBoard) !== JSON.stringify(this.board)) {\n      this.addNewTile();\n    }\n\n    this.updateStatus();\n  }\n\n  canMove() {\n    for (let r = 0; r < 4; r++) {\n      for (let c = 0; c < 4; c++) {\n        if (this.board[r][c] === 0) {\n          return true;\n        }\n\n        if (c < 3 && this.board[r][c] === this.board[r][c + 1]) {\n          return true;\n        }\n\n        if (r < 3 && this.board[r][c] === this.board[r + 1][c]) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  getScore() {\n    return this.score;\n  }\n\n  getState() {\n    return this.board;\n  }\n\n  getStatus() {\n    return this.status;\n  }\n\n  createEmptyGrid() {\n    return Array.from({ length: 4 }, () => Array(4).fill(0));\n  }\n\n  start() {\n    this.status = 'playing';\n    this.addNewTile();\n    this.addNewTile();\n  }\n\n  restart() {\n    this.status = 'idle';\n\n    this.board = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n    this.score = 0;\n    this.start();\n  }\n\n  slideRow(row) {\n    let arr = row.filter((val) => val);\n    const empty = 4 - arr.length;\n    const zeroes = Array(empty).fill(0);\n\n    arr = arr.concat(zeroes);\n\n    return arr;\n  }\n\n  combineRow(row) {\n    for (let i = 0; i < row.length - 1; i++) {\n      if (row[i] === row[i + 1] && row[i] !== 0) {\n        row[i] = row[i] * 2;\n        row[i + 1] = 0;\n        this.score += row[i];\n      }\n    }\n\n    return row;\n  }\n\n  addNewTile() {\n    const emptyTiles = [];\n\n    for (let r = 0; r < 4; r++) {\n      for (let c = 0; c < 4; c++) {\n        if (this.board[r][c] === 0) {\n          emptyTiles.push([r, c]);\n        }\n      }\n    }\n\n    if (emptyTiles.length > 0) {\n      const [row, col] =\n        emptyTiles[Math.floor(Math.random() * emptyTiles.length)];\n\n      this.board[row][col] = Math.random() < 0.9 ? 2 : 4;\n    }\n  }\n\n  transponseBoard() {\n    const newBoard = [[], [], [], []];\n\n    for (let r = 0; r < 4; r++) {\n      for (let c = 0; c < 4; c++) {\n        newBoard[c][r] = this.board[r][c];\n      }\n    }\n\n    this.board = newBoard;\n  }\n\n  updateStatus() {\n    if (this.board.flat().includes(2048)) {\n      this.status = 'win';\n    } else if (!this.board.flat().includes(0) && !this.canMove()) {\n      this.status = 'lose';\n    } else {\n      this.status = 'playing';\n    }\n  }\n}\n\nmodule.exports = Game;\n"],"names":["$09e991522ca7e64e$var$game","constructor","initialState","board","score","status","moveLeft","oldBoard","JSON","parse","stringify","i","length","row","slideRow","combineRow","addNewTile","updateStatus","moveRight","slice","reverse","moveUp","transponseBoard","moveDown","canMove","r","c","getScore","getState","getStatus","createEmptyGrid","Array","from","fill","start","restart","arr","filter","val","zeroes","concat","emptyTiles","push","col","Math","floor","random","newBoard","flat","includes","$09e991522ca7e64e$var$render","gameBoard","cells","table","document","querySelector","getElementsByTagName","index","textContent","className","classList","add","scoreElement","messageWin","messageLose","messageStart","remove","$09e991522ca7e64e$var$button","addEventListener","buttonText","replace","e","key"],"version":3,"file":"index.4b30db51.js.map"}